generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DRIVER
  CUSTOMER
}

enum VehicleType {
  CAR
  DELIVERY
  TUKTUK
  TRUCK
  WATER_TRUCK
  TOW_TRUCK
  WHEELCHAIR
  LIMO
}

// --- ADDED SCHEDULED & NO_SHOW ---
enum RideStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  SCHEDULED
  NO_SHOW
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  phone            String          @unique
  email            String?         @unique
  password         String
  role             Role
  vehicleType      VehicleType?
  isBusy           Boolean         @default(false)
  ridesAsDriver    Ride[]          @relation("DriverRides")
  ridesAsCustomer  Ride[]          @relation("CustomerRides")
  verificationCode String?
  phoneVerified    Boolean         @default(false)
  disabled         Boolean         @default(false)
  trustedDevices   TrustedDevice[]
  avatar           String?

  // Chat relations
  chatsAsCustomer  Chat[]          @relation("ChatCustomer")
  chatsAsDriver    Chat[]          @relation("ChatDriver")
  messages         Message[]

  // --- Subscription & Free Trial Fields for DRIVERS only ---
  trialStart             DateTime?      @map("trial_start")
  trialEnd               DateTime?      @map("trial_end")
  subscriptionStatus     String?        @default("trial")
  subscriptionFee        Float?         @default(0)
  paymentMethod          String?
  isSubscriptionDisabled Boolean?       @default(false)

  // --- Location fields for map display ---
  lat         Float?
  lng         Float?
  online      Boolean?      @default(false)
  
  // --- New fields for phone-based location ---
  country         String?   // ISO country code, e.g. "LB"
  countryName     String?   // Human readable, e.g. "Lebanon"
  area            String?   // Area/prefix, e.g. "70" or "212"

  // --- Last known location tracking ---
  lastKnownLat   Float?
  lastKnownLng   Float?
  lastLocationAt DateTime?
}

model Ride {
  id                Int         @id @default(autoincrement())
  customer          User        @relation("CustomerRides", fields: [customerId], references: [id])
  customerId        Int
  driver            User?       @relation("DriverRides", fields: [driverId], references: [id])
  driverId          Int?
  originLat         Float
  originLng         Float
  destLat           Float
  destLng           Float
  destinationName   String?     // e.g. "Airport", "Mall", "Home"
  note              String?     // customer instructions
  requestedAt       DateTime    @default(now())
  acceptedAt        DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  cancelledAt       DateTime?
  status            RideStatus  @default(PENDING)
  vehicleType       VehicleType
  rating            Int?
  feedback          String?
  chat              Chat?
  scheduledAt       DateTime?   // For scheduled rides
  noShowReportedAt  DateTime?   // When "No Show" is marked

  @@index([customerId])
  @@index([driverId])
  @@index([status])
  @@index([scheduledAt])
}

model TrustedDevice {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  deviceId  String
  addedAt   DateTime @default(now())
  @@unique([userId, deviceId])
}

model Chat {
  id          Int       @id @default(autoincrement())
  ride        Ride      @relation(fields: [rideId], references: [id])
  rideId      Int       @unique
  customer    User      @relation("ChatCustomer", fields: [customerId], references: [id])
  customerId  Int
  driver      User      @relation("ChatDriver", fields: [driverId], references: [id])
  driverId    Int
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([customerId])
  @@index([driverId])
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  content   String
  sentAt    DateTime @default(now())
}