generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DRIVER
  CUSTOMER
}

enum VehicleType {
  CAR
  DELIVERY
  TUKTUK
  TRUCK
  WATER_TRUCK
}

enum RideStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  phone            String          @unique
  email            String?         @unique
  password         String
  role             Role
  vehicleType      VehicleType?
  isBusy           Boolean         @default(false)
  ridesAsDriver    Ride[]          @relation("DriverRides")
  ridesAsCustomer  Ride[]          @relation("CustomerRides")
  verificationCode String?
  phoneVerified    Boolean         @default(false)
  disabled         Boolean         @default(false)
  trustedDevices   TrustedDevice[]
  avatar           String?

  // Chat relations (for direct access to chats if needed)
  chatsAsCustomer  Chat[]          @relation("ChatCustomer")
  chatsAsDriver    Chat[]          @relation("ChatDriver")
  messages         Message[]

  // --- Subscription & Free Trial Fields for DRIVERS only ---
  trialStart           DateTime?      @map("trial_start")
  trialEnd             DateTime?      @map("trial_end")
  subscriptionStatus   String?        @default("trial") // trial, active, expired, disabled
  subscriptionFee      Float?         @default(0)
  paymentMethod        String?        // "credit_card", "wish", "omt", etc.
  isSubscriptionDisabled Boolean?     @default(false)
}

model Ride {
  id          Int         @id @default(autoincrement())
  customer    User        @relation("CustomerRides", fields: [customerId], references: [id])
  customerId  Int
  driver      User?       @relation("DriverRides", fields: [driverId], references: [id])
  driverId    Int?
  originLat   Float
  originLng   Float
  destLat     Float
  destLng     Float
  requestedAt DateTime    @default(now())
  acceptedAt  DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  cancelledAt DateTime?
  status      RideStatus  @default(PENDING)
  vehicleType VehicleType
  rating      Int?
  feedback    String?

  // Each ride can have one chat (1-1 rides)
  chat        Chat?
}

model TrustedDevice {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  deviceId  String
  addedAt   DateTime @default(now())

  @@unique([userId, deviceId])
}

model Chat {
  id          Int       @id @default(autoincrement())
  ride        Ride      @relation(fields: [rideId], references: [id])
  rideId      Int       @unique
  customer    User      @relation("ChatCustomer", fields: [customerId], references: [id])
  customerId  Int
  driver      User      @relation("ChatDriver", fields: [driverId], references: [id])
  driverId    Int
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  content   String
  sentAt    DateTime @default(now())
}